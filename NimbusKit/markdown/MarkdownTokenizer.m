//
// Copyright 2011-2014 NimbusKit
//
// Autogenerated by flex using Jeff Verkoeyen's Markdown grammar
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#define YY_NO_INPUT

#include "MarkdownTokens.h"

#line 3 "lex.markdown.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE markdownrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via markdownrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void markdownrestart (FILE *input_file ,yyscan_t yyscanner );
void markdown_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void markdown_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void markdown_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void markdownpop_buffer_state (yyscan_t yyscanner );

static void markdownensure_buffer_stack (yyscan_t yyscanner );
static void markdown_load_buffer_state (yyscan_t yyscanner );
static void markdown_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER markdown_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE markdown_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *markdownalloc (yy_size_t ,yyscan_t yyscanner );
void *markdownrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void markdownfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer markdown_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 15
#define YY_END_OF_BUFFER 16
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[330] =
    {   0,
        0,    0,   16,   14,   13,   13,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,    6,   14,    0,    0,
       12,    0,    0,    0,    1,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    1,    0,    5,    0,
        6,    6,   10,    0,    0,   12,   11,    0,    1,    0,
        1,    0,    0,    0,    0,    0,    8,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    6,    7,    7,    0,    0,
        0,    0,    0,    0,    2,    8,    0,    8,    8,    0,
        8,    8,    0,    0,    0,    0,    0,    0,    7,    0,

        0,    0,    0,    0,    0,    7,    0,    0,    0,    0,
        0,    0,    2,    4,    6,    2,    2,    7,    0,    0,
        0,    0,    0,    8,    0,    8,    8,    8,    0,    8,
        8,    8,    8,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    8,    0,    0,    0,    0,    7,    0,
        0,    0,    0,    0,    6,    0,    7,    3,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    0,
        8,    8,    0,    0,    0,    9,    9,    0,    0,    9,
        9,    8,    8,    0,    0,    7,    0,    6,    3,    8,
        8,    8,    8,    0,    8,    8,    8,    8,    8,    0,

        8,    8,    8,    8,    8,    0,    8,    8,    8,    7,
        0,    8,    0,    0,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    0,    8,    8,    8,
        8,    8,    7,    8,    0,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    0,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        0,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    6,    7,    6,    6,    6,    6,    8,
        9,   10,    6,    6,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    6,    6,
       16,    6,    6,    6,   14,   14,   14,   14,   14,   17,
       18,   19,   18,   18,   18,   18,   18,   18,   18,   20,
       18,   18,   21,   22,   18,   18,   18,   18,   18,   18,
       23,   24,   25,    6,   26,   27,   14,   14,   14,   14,

       14,   28,   18,   29,   18,   18,   18,   18,   18,   18,
       18,   30,   18,   18,   31,   32,   18,   18,   18,   18,
       18,   18,    6,    6,    6,   33,    1,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,

       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34
    } ;

static yyconst flex_int32_t yy_meta[35] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        3,    4,    5,    3,    2,    6,    3,    3,    3,    3,
        3,    3,    7,    3,    2,    2,    2,    3,    3,    3,
        3,    3,    2,    3
    } ;

static yyconst flex_int16_t yy_base[378] =
    {   0,
        0,   28,  693,  683,  672,  670,   33,   34,   42,   18,
       19,   44,   76,   39,   54,   49,   80,   38,  668,   73,
      663,   43,   65,   75,   85,  653,  102,  136,   80,   85,
      122,   83,    0,  163,  103,   85,  109,  100,  115,   95,
      661,  141,  655,  144,  143,  654,   98,  138,  615,  607,
     1697,  159,  148,  162,  171,  181,  205,  239,  604,  266,
      173,  159,  241,  586,  235,  168,  261,   41,  583,  271,
      157,  171,  158,  187,  214,  225, 1697,  597,  204,  581,
      579,  247,  242,  265,  245,  287,  321,  570,  339,  373,
        0,  400,  279,  272,  183,  247,  281,  311,  539,  304,

      559,  536,  141,  314,  316,  519,  205,  509,  329,  502,
      258,  336,  262,  345,  334,  513, 1697,  496,  336,  494,
      482,  369,  378,    0,  428,    0,  455,    0,  483,  476,
      510,  382,  337,  456,  369,  379,  410,  399,  409,  418,
      400,  465,  411,  437,  423,  373,  537,  438,  447,  340,
      445,  451,  438,  413,  393,  437,  434,  435,    0,  564,
      452,  461,    0,  591,  479,  465,  491,  457,  399,  482,
      491,  485,  503,  504,  619,  423,  382,  651,  514,  396,
     1697,    0,  675,  519,  529,  365,  338,  323, 1697,  539,
      542,  307,  518,  544,  557,  564,  559,  569,  513,  584,

      280,  702,  585,  533,  729,  586,  747,  771,  805,  581,
      652,  642,  655,  667,  668,  568,  832,  673,  276,  674,
      680,  599,  859,  695,  696,  701,  708,  242,  877,  911,
        0,  938,  221,  721,  725,  727,  734,  742,  746,  770,
      797,  798,  799,  803,  956,  980, 1014,  209, 1041,  804,
      824,  825,  826,  830,  831,  851,  852,  857,  864,  872,
     1059, 1093,  194, 1111, 1145,    0, 1172,  876,  903,  904,
      905,  909,  910,  930,  931,  932,  936,    0, 1200,    0,
     1227,    0, 1255,  151, 1282,  937,  954,  955, 1018,  975,
     1010, 1012, 1309,    0, 1324, 1019,    0, 1351, 1020, 1035,

     1037, 1047, 1085, 1378, 1086, 1087, 1091, 1092, 1109, 1110,
     1137, 1138, 1139, 1143, 1144, 1164, 1165, 1166, 1170, 1171,
     1192, 1193, 1194, 1198, 1199, 1219, 1220, 1221, 1697, 1394,
     1401, 1408, 1415, 1422, 1429, 1436, 1443, 1450, 1457, 1464,
     1470, 1477, 1484, 1491, 1498, 1505, 1510, 1516, 1523, 1530,
     1537, 1544, 1551, 1558,  112, 1564, 1571, 1578, 1585, 1590,
       99, 1596, 1603, 1609, 1614, 1618, 1622, 1628, 1634, 1640,
     1647, 1654, 1661, 1668, 1675, 1682, 1689
    } ;

static yyconst flex_int16_t yy_def[378] =
    {   0,
      329,    1,  329,  330,  330,  329,  330,  331,  330,    9,
        9,  332,  333,  334,  335,  330,  336,    9,  330,  329,
      329,  330,  331,  337,  338,    9,  330,  339,    9,    9,
      332,  340,    9,    9,  334,  341,  342,  335,  335,  343,
      336,  336,  330,    9,  329,  329,  329,  330,  330,  337,
      329,  337,  338,  344,  345,   27,    9,  346,    9,    9,
        9,    9,  332,  340,  340,  340,  347,   34,  341,  341,
      342,  348,  349,  343,  343,  336,  329,  337,  330,  344,
      329,  344,  345,  350,  330,   57,  351,   57,   86,  352,
       57,   57,  347,   60,  330,    9,    9,  353,  340,  354,

       93,  355,   93,  356,   34,  341,  330,  348,  348,  329,
      349,  357,  330,  343,  336,  330,  329,  344,  330,  350,
      329,  350,  330,   86,  358,   86,   86,   89,  359,   57,
       57,  360,   92,  361,   60,  330,  353,  354,  362,  353,
      354,  363,  354,  360,  364,   93,   93,   34,  348,  330,
      357,  357,  329,  330,  336,  329,  350,  330,   86,   86,
      365,  127,   89,   89,  144,  131,  144,  366,  144,  367,
       92,  365,  368,   60,  329,  332,  340,  354,  363,  330,
      329,  144,  144,  147,   34,  357,  329,  336,  329,  365,
      160,  190,  190,  369,  127,  366,  164,  131,  366,  370,

      144,  144,   92,  190,  190,   60,  175,  175,  371,  354,
      363,  183,  147,   34,  160,  190,  205,  127,  196,  164,
      131,  196,  196,  202,   92,  205,   60,  208,  175,  372,
      208,  208,  363,  183,  147,  160,  217,  127,  164,  131,
      223,  202,   92,  205,  175,  208,  373,  208,  208,  232,
      183,  147,  160,  217,  127,  164,  131,  223,  202,  205,
      246,  374,  246,  261,  375,  246,  246,  249,  232,  183,
      147,  160,  217,  164,  223,  202,  205,  261,  376,  261,
      261,  264,  377,  246,  246,  267,  249,  232,  144,  217,
      223,  202,  190,  261,  261,  281,  264,  264,  285,  267,

      249,  232,  217,  196,  295,  281,  298,  285,  267,  249,
      232,  295,  281,  298,  285,  267,  249,  295,  281,  298,
      285,  267,  295,  281,  298,  285,  295,  298,    0,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329
    } ;

static yyconst flex_int16_t yy_nxt[1732] =
    {   0,
        4,    5,    6,    4,    7,    4,    4,    4,    4,    8,
        9,    4,    4,    9,    4,    4,   10,    9,   11,    9,
        9,    9,   12,   13,    4,   14,   15,   10,   11,    9,
        9,    9,   16,    9,   17,   20,   24,   22,   18,   29,
       30,   36,   43,   25,   20,   47,   32,   48,   44,   29,
       30,   20,   26,   27,  105,   26,   20,  105,   26,   26,
       26,   26,   26,   26,   37,   28,   19,   24,  105,   26,
       26,   26,   26,   26,   49,   26,   19,   19,   20,   19,
       39,   40,   20,   45,   51,   52,   42,   54,   45,   34,
       52,   56,   34,   65,   55,   70,   56,   20,   65,   61,

       70,  172,   20,   34,   20,   36,   62,   66,   45,   61,
       51,   72,   57,   45,  144,   57,   62,   20,   57,   57,
       57,   57,   57,   57,   32,   58,   39,   75,   49,   57,
       57,   57,   57,   57,   73,   57,   19,   19,   20,   19,
       47,   39,   48,   20,   19,   77,   63,   76,   43,   60,
       54,  103,   60,   45,   44,   56,  329,   79,   45,   72,
      112,   78,  245,   60,   33,   67,   33,   33,   51,   52,
       56,   81,   82,   84,   52,  100,   68,   82,   97,   68,
       85,  109,  107,  113,   56,   20,  109,   95,   97,   20,
       68,   86,   66,   96,   86,  136,  110,   86,   86,   86,

       86,   86,   86,   96,   87,  245,   20,   20,   86,   86,
       86,   86,   86,  116,   86,   88,   20,   89,   88,   75,
      245,   88,   88,   88,   88,   88,   88,   20,   90,  181,
      116,  115,   88,   88,   88,   88,   88,   99,   88,   19,
       19,   20,   19,   32,   84,   65,  114,   20,   98,  118,
       65,  119,   92,  245,  123,   92,   81,   82,   56,   66,
      112,   95,   82,   19,   20,   63,   92,   59,   93,   59,
       59,  101,  102,  106,  121,  122,   45,   56,   77,   94,
      122,   70,   94,  150,  104,  135,   70,  154,  135,  101,
      134,  134,   56,   94,   45,   95,   51,  124,   19,  135,

      124,   96,  104,  124,  124,  124,  124,  124,  124,   77,
      125,   96,   64,  138,  124,  124,  124,  124,  124,   31,
      124,   19,   19,   20,   19,   20,  142,  147,  143,  148,
      147,  149,  148,  139,  127,  140,   20,  127,   20,  109,
      155,  147,   20,  148,  109,  123,  152,   20,  127,  128,
      171,  152,  128,  171,  110,  128,  128,  128,  128,  128,
      128,  153,  129,  189,  171,  154,  128,  128,  128,  128,
      128,  157,  128,   19,   19,   20,   19,  114,  121,  122,
       20,   20,  174,  103,  122,  174,  131,  158,  329,  131,
      153,  175,  167,  102,  168,   20,  174,   45,   20,  188,

      131,   91,  132,   91,   91,  170,   66,  177,  177,  178,
      134,  179,  138,  133,  178,   20,  133,  180,  176,  177,
      138,  142,  142,  143,  143,   32,  176,  133,   19,   19,
       20,   19,  139,  142,  140,  143,  183,   20,  158,  183,
      139,  160,  140,  121,  160,   19,  189,   63,  102,  168,
      183,  185,  329,  186,  185,  160,  126,  161,  126,  126,
      170,  152,  192,  187,  168,  185,  152,   45,  162,  168,
      153,  162,  110,  181,  195,  194,  153,  195,  198,  173,
      200,  198,  162,   19,   19,   20,   19,   56,  195,  167,
      134,  156,  198,   77,   45,  202,  164,  168,  202,  164,

      329,  167,  134,  121,  203,   81,   45,  203,  194,  202,
      164,  130,  165,  130,  130,   20,  205,  206,  203,  205,
      206,   56,  181,  166,  211,  168,  166,  117,  193,  211,
      205,  206,  213,  329,  110,  213,  200,  166,  146,  146,
      146,  146,  214,  193,   51,  214,  213,  103,  329,  192,
      184,  168,  329,  184,   45,  215,  214,  217,  215,  145,
      217,   77,  194,   66,  184,  159,  190,  159,  159,  215,
      218,  217,  220,  218,  219,  220,  168,  191,  193,   45,
      191,   56,  221,  329,  218,  221,  220,  200,  117,  177,
       81,  191,  163,  196,  163,  163,  221,  223,  225,  227,

      223,  225,  227,  142,  197,  143,   51,  197,   51,  199,
       66,  223,  225,  227,  329,   56,   51,   20,  197,  207,
      207,   20,  207,   19,  207,  207,  207,  207,  207,  208,
      207,  207,  208,  207,  207,  208,  208,  208,  208,  208,
      208,  207,  209,  207,  207,  207,  208,  208,  208,  208,
      208,  207,  208,  210,  233,  234,   46,   20,  234,  177,
      181,  178,  211,   20,   56,   46,  178,  211,  235,  234,
       20,  235,   21,  142,   20,  143,  182,  182,  182,  182,
       26,  236,  235,   26,  236,   20,  238,  239,  212,  238,
      239,  212,  329,  240,   26,  236,  240,  329,  329,  329,

      238,  239,  212,  201,  201,  201,  201,  240,  242,  243,
      329,  242,  243,  134,  244,  224,  329,  244,  224,  329,
      329,   26,  242,  243,   26,  329,  329,  329,  244,  224,
      204,  204,  204,  204,  251,   26,  329,  251,  252,  193,
      253,  252,  226,  253,  329,  226,  329,  254,  251,  329,
      254,  329,  252,  329,  253,  255,  226,  207,  255,  256,
      207,  254,  256,  207,  207,  207,  207,  207,  207,  255,
      207,  329,  329,  256,  207,  207,  207,  207,  207,  329,
      207,  228,  229,  257,  228,  329,  257,  228,  228,  228,
      228,  228,  228,  329,  230,  329,  329,  257,  228,  228,

      228,  228,  228,  329,  228,  207,  207,   20,  207,   33,
      258,  259,   88,  258,  259,   88,  260,  269,  232,  260,
      269,  232,  329,  329,  258,  259,   88,  329,  329,  329,
      260,  269,  232,  216,  216,  216,  216,  270,  271,  272,
      270,  271,  272,  273,  124,  237,  273,  124,  237,  329,
      329,  270,  271,  272,  329,  329,  329,  273,  124,  237,
      222,  222,  222,  222,  274,   88,  329,  274,   88,  199,
      275,  329,  241,  275,  329,  241,  329,  276,  274,   88,
      276,  329,  329,  329,  275,  277,  241,  246,  277,  287,
      246,  276,  287,  246,  246,  246,  246,  246,  246,  277,

      247,  329,  329,  287,  246,  246,  246,  246,  246,  329,
      246,  207,  207,   20,  207,   59,  288,  289,  103,  288,
      289,  103,  124,  290,  249,  124,  290,  249,  329,  329,
      288,  289,  103,  329,  329,  329,  124,  290,  249,  231,
       67,  231,   33,  128,  291,  292,  128,  291,  292,  293,
      300,  250,  293,  300,  250,  329,  329,  128,  291,  292,
      329,  329,  329,  293,  300,  250,  261,  301,  302,  261,
      301,  302,  261,  261,  261,  261,  261,  261,  329,  262,
      329,  301,  302,  261,  261,  261,  261,  261,  303,  261,
      263,  303,  264,  263,  329,  329,  263,  263,  263,  263,

      263,  263,  303,  265,  329,  329,  329,  263,  263,  263,
      263,  263,  329,  263,  207,  207,   20,  207,   91,  182,
      182,  182,  182,  304,  329,  169,  304,  267,  169,  329,
      267,  329,  306,  308,  329,  306,  308,  304,  329,  169,
      329,  267,  248,   93,  248,   59,  306,  308,  309,  329,
      310,  309,  245,  310,  268,  329,  329,  268,  329,  329,
      311,  329,  309,  311,  310,  329,  329,  329,  268,  278,
      207,  329,  278,  329,  311,  278,  278,  278,  278,  278,
      278,  329,  279,  329,  329,  329,  278,  278,  278,  278,
      278,  329,  278,  207,  207,   20,  207,  126,  193,  312,

      313,  193,  312,  313,  314,  315,  281,  314,  315,  281,
      329,  329,  193,  312,  313,  329,  329,  329,  314,  315,
      281,  282,  316,  317,  282,  316,  317,  282,  282,  282,
      282,  282,  282,  329,  283,  329,  316,  317,  282,  282,
      282,  282,  282,  329,  282,  207,  207,   20,  207,  130,
      228,  318,  319,  228,  318,  319,  320,  321,  285,  320,
      321,  285,  329,  329,  228,  318,  319,  329,  329,  329,
      320,  321,  285,  266,  132,  266,   91,  322,  228,  323,
      322,  228,  323,  324,  325,  286,  324,  325,  286,  329,
      329,  322,  228,  323,  329,  329,  329,  324,  325,  286,

      207,  207,   20,  207,  159,  326,  263,  327,  326,  263,
      327,  278,  328,  295,  278,  328,  295,  329,  329,  326,
      263,  327,  329,  329,  329,  278,  328,  295,  280,  161,
      280,  126,  263,  278,  282,  263,  278,  282,  329,  329,
      296,  329,  329,  296,  329,  329,  263,  278,  282,  329,
      329,  329,  329,  329,  296,  207,  207,   20,  207,  163,
      329,  329,  329,  329,  329,  329,  329,  329,  298,  329,
      329,  298,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  298,  284,  165,  284,  130,  329,  329,  329,
      329,  329,  329,  245,  329,  299,  329,  329,  299,  329,

      329,  329,  329,  329,  329,  329,  329,  329,  329,  299,
      204,  204,  204,  204,  329,  329,  329,  329,  329,  193,
      329,  329,  329,  329,  329,  294,  190,  294,  159,  329,
      329,  329,  329,  329,  329,  329,  329,  305,  329,  329,
      305,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  305,  297,  196,  297,  163,  329,  329,  329,  329,
      329,  329,  329,  329,  307,  329,  329,  307,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  307,  222,
      222,  222,  222,  329,  329,  329,  329,  329,  199,  329,
      329,  329,  329,  329,   19,   19,   19,   19,   19,   19,

       19,   23,   23,   23,   23,   23,   23,   23,   31,   31,
       31,   31,   31,   31,   31,   33,   33,   33,   33,   33,
       33,   33,   35,   35,   35,   35,   35,   35,   35,   38,
       38,   38,   38,   38,   38,   38,   41,   41,   41,   41,
       41,   41,   41,   50,   50,   50,   50,   50,   50,   50,
       53,   53,   53,   53,   53,   53,   53,   59,   59,   59,
       59,   59,   59,   59,   64,   64,   64,   64,   64,   64,
       69,   69,   69,   69,   69,   69,   69,   71,   71,   71,
       71,   71,   71,   71,   74,   74,   74,   74,   74,   74,
       74,   80,   80,   80,   80,   80,   80,   80,   83,   83,

       83,   83,   83,   83,   83,   91,   91,   91,   91,   91,
       91,   91,  103,  103,  329,  103,  108,  108,  108,  108,
      108,  108,  108,  111,  111,  111,  111,  111,  111,  111,
      120,  120,  120,  120,  120,  120,  120,  126,  126,  126,
      126,  126,  126,  126,  130,  130,  130,  130,  130,  130,
      130,  137,  137,  137,  137,  137,  137,  137,  141,  141,
      141,  141,  141,  141,  141,  146,  146,  146,  146,  146,
      146,  151,  151,  151,  151,  151,  151,  151,  159,  159,
      159,  159,  159,  159,  159,  163,  163,  163,  163,  163,
      163,  163,  169,  169,  169,  169,  139,  139,  139,  139,

      139,  139,  139,  142,  142,  142,  142,  142,  142,  142,
      182,  182,  182,  182,  182,  182,  193,  329,  193,  193,
      199,  329,  199,  201,  201,  201,  201,  201,  201,  204,
      204,  204,  204,  204,  204,  216,  216,  216,  216,  216,
      216,  222,  222,  222,  222,  222,  222,  231,  231,  231,
      231,  231,  231,  231,  248,  248,  248,  248,  248,  248,
      248,  266,  266,  266,  266,  266,  266,  266,  280,  280,
      280,  280,  280,  280,  280,  284,  284,  284,  284,  284,
      284,  284,  294,  294,  294,  294,  294,  294,  294,  297,
      297,  297,  297,  297,  297,  297,    3,  329,  329,  329,

      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329
    } ;

static yyconst flex_int16_t yy_chk[1732] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    7,    8,    7,    2,   10,
       11,   14,   18,    8,    9,   22,   12,   22,   18,   10,
       11,   16,    9,    9,   68,    9,   15,   68,    9,    9,
        9,    9,    9,    9,   14,    9,   12,   23,   68,    9,
        9,    9,    9,    9,   23,    9,   13,   13,   13,   13,
       15,   16,   17,   20,   24,   24,   17,   25,   20,   13,
       24,   29,   13,   32,   25,   36,   30,   40,   32,   29,

       36,  361,   38,   13,   27,   35,   30,   32,   47,   29,
       36,   37,   27,   47,  355,   27,   30,   39,   27,   27,
       27,   27,   27,   27,   31,   27,   38,   40,   35,   27,
       27,   27,   27,   27,   37,   27,   28,   28,   28,   28,
       48,   39,   48,   42,   31,   45,   31,   42,   44,   28,
       53,  103,   28,   45,   44,   44,  103,   53,   45,   71,
       73,   52,  284,   28,   34,   34,   34,   34,   52,   52,
       62,   54,   54,   55,   52,   66,   34,   54,   62,   34,
       55,   72,   71,   73,   61,   95,   72,   61,   62,   74,
       34,   56,   66,   61,   56,   95,   72,   56,   56,   56,

       56,   56,   56,   61,   56,  263,   79,  107,   56,   56,
       56,   56,   56,   79,   56,   57,   75,   57,   57,   74,
      248,   57,   57,   57,   57,   57,   57,   76,   57,  233,
      107,   76,   57,   57,   57,   57,   57,   65,   57,   58,
       58,   58,   58,   63,   83,   65,   75,   85,   63,   82,
       65,   83,   58,  228,   85,   58,   82,   82,   96,   65,
      111,   96,   82,   63,  113,   63,   58,   60,   60,   60,
       60,   67,   67,   70,   84,   84,   67,   60,  219,   60,
       84,   70,   60,  111,   67,   94,   70,  113,   94,   93,
       93,  201,   97,   60,   93,   97,   70,   86,   86,   94,

       86,   97,   93,   86,   86,   86,   86,   86,   86,  192,
       86,   97,  100,   98,   86,   86,   86,   86,   86,   98,
       86,   87,   87,   87,   87,  188,  100,  104,  100,  105,
      104,  109,  105,   98,   87,   98,  115,   87,  119,  109,
      115,  104,  150,  105,  109,  119,  112,  114,   87,   89,
      133,  112,   89,  133,  109,   89,   89,   89,   89,   89,
       89,  112,   89,  187,  133,  150,   89,   89,   89,   89,
       89,  122,   89,   90,   90,   90,   90,  114,  122,  122,
      123,  136,  135,  146,  122,  135,   90,  123,  146,   90,
      186,  136,  132,  132,  132,  155,  135,  132,  180,  155,

       90,   92,   92,   92,   92,  132,  177,  138,  141,  138,
      169,  139,  137,   92,  138,  154,   92,  139,  137,  143,
      140,  138,  141,  138,  141,  176,  140,   92,  125,  125,
      125,  125,  137,  143,  137,  143,  145,  158,  154,  145,
      140,  125,  140,  157,  125,  176,  156,  176,  144,  144,
      145,  148,  144,  152,  148,  125,  127,  127,  127,  127,
      144,  152,  161,  153,  161,  148,  152,  161,  127,  168,
      151,  127,  149,  142,  162,  161,  152,  162,  166,  134,
      168,  166,  127,  129,  129,  129,  129,  130,  162,  165,
      165,  121,  166,  167,  165,  170,  129,  172,  170,  129,

      172,  167,  167,  120,  171,  118,  167,  171,  172,  170,
      129,  131,  131,  131,  131,  116,  173,  174,  171,  173,
      174,  131,  179,  131,  179,  199,  131,  110,  193,  179,
      173,  174,  184,  193,  108,  184,  199,  131,  147,  147,
      147,  147,  185,  204,  106,  185,  184,  147,  204,  190,
      147,  190,  147,  147,  190,  191,  185,  194,  191,  102,
      194,  101,  190,   99,  147,  160,  160,  160,  160,  191,
      195,  194,  197,  195,  196,  197,  196,  160,  216,  196,
      160,   88,  198,  216,  195,  198,  197,  196,   81,  210,
       80,  160,  164,  164,  164,  164,  198,  200,  203,  206,

      200,  203,  206,  210,  164,  210,   78,  164,   69,  222,
       64,  200,  203,  206,  222,   59,   50,   49,  164,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  178,  211,  212,   46,   43,  212,  178,
      211,  178,  211,   41,   26,   21,  178,  211,  213,  212,
       19,  213,    6,  178,    5,  178,  183,  183,  183,  183,
      214,  215,  213,  214,  215,    4,  218,  220,  183,  218,
      220,  183,    3,  221,  214,  215,  221,    0,    0,    0,

      218,  220,  183,  202,  202,  202,  202,  221,  224,  225,
        0,  224,  225,  202,  226,  202,    0,  226,  202,    0,
        0,  227,  224,  225,  227,    0,    0,    0,  226,  202,
      205,  205,  205,  205,  234,  227,    0,  234,  235,  205,
      236,  235,  205,  236,  205,  205,    0,  237,  234,    0,
      237,    0,  235,    0,  236,  238,  205,  207,  238,  239,
      207,  237,  239,  207,  207,  207,  207,  207,  207,  238,
      207,    0,    0,  239,  207,  207,  207,  207,  207,    0,
      207,  208,  208,  240,  208,    0,  240,  208,  208,  208,
      208,  208,  208,    0,  208,    0,    0,  240,  208,  208,

      208,  208,  208,    0,  208,  209,  209,  209,  209,  209,
      241,  242,  243,  241,  242,  243,  244,  250,  209,  244,
      250,  209,    0,    0,  241,  242,  243,    0,    0,    0,
      244,  250,  209,  217,  217,  217,  217,  251,  252,  253,
      251,  252,  253,  254,  255,  217,  254,  255,  217,    0,
        0,  251,  252,  253,    0,    0,    0,  254,  255,  217,
      223,  223,  223,  223,  256,  257,    0,  256,  257,  223,
      258,    0,  223,  258,  223,  223,    0,  259,  256,  257,
      259,    0,    0,    0,  258,  260,  223,  229,  260,  268,
      229,  259,  268,  229,  229,  229,  229,  229,  229,  260,

      229,    0,    0,  268,  229,  229,  229,  229,  229,    0,
      229,  230,  230,  230,  230,  230,  269,  270,  271,  269,
      270,  271,  272,  273,  230,  272,  273,  230,    0,    0,
      269,  270,  271,    0,    0,    0,  272,  273,  230,  232,
      232,  232,  232,  274,  275,  276,  274,  275,  276,  277,
      286,  232,  277,  286,  232,    0,    0,  274,  275,  276,
        0,    0,    0,  277,  286,  232,  245,  287,  288,  245,
      287,  288,  245,  245,  245,  245,  245,  245,    0,  245,
        0,  287,  288,  245,  245,  245,  245,  245,  290,  245,
      246,  290,  246,  246,    0,    0,  246,  246,  246,  246,

      246,  246,  290,  246,    0,    0,    0,  246,  246,  246,
      246,  246,    0,  246,  247,  247,  247,  247,  247,  289,
      289,  289,  289,  291,    0,  292,  291,  247,  292,    0,
      247,    0,  296,  299,    0,  296,  299,  291,    0,  292,
        0,  247,  249,  249,  249,  249,  296,  299,  300,    0,
      301,  300,  249,  301,  249,    0,    0,  249,    0,    0,
      302,    0,  300,  302,  301,    0,    0,    0,  249,  261,
      261,    0,  261,    0,  302,  261,  261,  261,  261,  261,
      261,    0,  261,    0,    0,    0,  261,  261,  261,  261,
      261,    0,  261,  262,  262,  262,  262,  262,  303,  305,

      306,  303,  305,  306,  307,  308,  262,  307,  308,  262,
        0,    0,  303,  305,  306,    0,    0,    0,  307,  308,
      262,  264,  309,  310,  264,  309,  310,  264,  264,  264,
      264,  264,  264,    0,  264,    0,  309,  310,  264,  264,
      264,  264,  264,    0,  264,  265,  265,  265,  265,  265,
      311,  312,  313,  311,  312,  313,  314,  315,  265,  314,
      315,  265,    0,    0,  311,  312,  313,    0,    0,    0,
      314,  315,  265,  267,  267,  267,  267,  316,  317,  318,
      316,  317,  318,  319,  320,  267,  319,  320,  267,    0,
        0,  316,  317,  318,    0,    0,    0,  319,  320,  267,

      279,  279,  279,  279,  279,  321,  322,  323,  321,  322,
      323,  324,  325,  279,  324,  325,  279,    0,    0,  321,
      322,  323,    0,    0,    0,  324,  325,  279,  281,  281,
      281,  281,  326,  327,  328,  326,  327,  328,    0,    0,
      281,    0,    0,  281,    0,    0,  326,  327,  328,    0,
        0,    0,    0,    0,  281,  283,  283,  283,  283,  283,
        0,    0,    0,    0,    0,    0,    0,    0,  283,    0,
        0,  283,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  283,  285,  285,  285,  285,    0,    0,    0,
        0,    0,    0,  285,    0,  285,    0,    0,  285,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  285,
      293,  293,  293,  293,    0,    0,    0,    0,    0,  293,
        0,    0,    0,    0,  293,  295,  295,  295,  295,    0,
        0,    0,    0,    0,    0,    0,    0,  295,    0,    0,
      295,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  295,  298,  298,  298,  298,    0,    0,    0,    0,
        0,    0,    0,    0,  298,    0,    0,  298,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  298,  304,
      304,  304,  304,    0,    0,    0,    0,    0,  304,    0,
        0,    0,    0,  304,  330,  330,  330,  330,  330,  330,

      330,  331,  331,  331,  331,  331,  331,  331,  332,  332,
      332,  332,  332,  332,  332,  333,  333,  333,  333,  333,
      333,  333,  334,  334,  334,  334,  334,  334,  334,  335,
      335,  335,  335,  335,  335,  335,  336,  336,  336,  336,
      336,  336,  336,  337,  337,  337,  337,  337,  337,  337,
      338,  338,  338,  338,  338,  338,  338,  339,  339,  339,
      339,  339,  339,  339,  340,  340,  340,  340,  340,  340,
      341,  341,  341,  341,  341,  341,  341,  342,  342,  342,
      342,  342,  342,  342,  343,  343,  343,  343,  343,  343,
      343,  344,  344,  344,  344,  344,  344,  344,  345,  345,

      345,  345,  345,  345,  345,  346,  346,  346,  346,  346,
      346,  346,  347,  347,    0,  347,  348,  348,  348,  348,
      348,  348,  348,  349,  349,  349,  349,  349,  349,  349,
      350,  350,  350,  350,  350,  350,  350,  351,  351,  351,
      351,  351,  351,  351,  352,  352,  352,  352,  352,  352,
      352,  353,  353,  353,  353,  353,  353,  353,  354,  354,
      354,  354,  354,  354,  354,  356,  356,  356,  356,  356,
      356,  357,  357,  357,  357,  357,  357,  357,  358,  358,
      358,  358,  358,  358,  358,  359,  359,  359,  359,  359,
      359,  359,  360,  360,  360,  360,  362,  362,  362,  362,

      362,  362,  362,  363,  363,  363,  363,  363,  363,  363,
      364,  364,  364,  364,  364,  364,  365,    0,  365,  365,
      366,    0,  366,  367,  367,  367,  367,  367,  367,  368,
      368,  368,  368,  368,  368,  369,  369,  369,  369,  369,
      369,  370,  370,  370,  370,  370,  370,  371,  371,  371,
      371,  371,  371,  371,  372,  372,  372,  372,  372,  372,
      372,  373,  373,  373,  373,  373,  373,  373,  374,  374,
      374,  374,  374,  374,  374,  375,  375,  375,  375,  375,
      375,  375,  376,  376,  376,  376,  376,  376,  376,  377,
      377,  377,  377,  377,  377,  377,  329,  329,  329,  329,

      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "markdown.grammar"
#line 927 "lex.markdown.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int markdownlex_init (yyscan_t* scanner);

int markdownlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int markdownlex_destroy (yyscan_t yyscanner );

int markdownget_debug (yyscan_t yyscanner );

void markdownset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE markdownget_extra (yyscan_t yyscanner );

void markdownset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *markdownget_in (yyscan_t yyscanner );

void markdownset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *markdownget_out (yyscan_t yyscanner );

void markdownset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t markdownget_leng (yyscan_t yyscanner );

char *markdownget_text (yyscan_t yyscanner );

int markdownget_lineno (yyscan_t yyscanner );

void markdownset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int markdownwrap (yyscan_t yyscanner );
#else
extern int markdownwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int markdownlex (yyscan_t yyscanner);

#define YY_DECL int markdownlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 38 "markdown.grammar"


#line 1152 "lex.markdown.c"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			markdownensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		markdown_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 330 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1697 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 40 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNEM, yyscanner);}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 41 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRONG, yyscanner);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 42 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRONGEM, yyscanner);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 43 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRIKETHROUGH, yyscanner);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 44 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNCODESPAN, yyscanner);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 45 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNHEADER, yyscanner);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 46 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNMULTILINEHEADER, yyscanner);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 47 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNURL, yyscanner);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 48 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNHREF, yyscanner);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 49 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNBULLETSTART, yyscanner);}
	YY_BREAK
case 11:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 51 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNNEWLINE, yyscanner);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 52 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNPARAGRAPH, yyscanner);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 53 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 54 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 56 "markdown.grammar"
ECHO;
	YY_BREAK
#line 1322 "lex.markdown.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * markdownlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( markdownwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of markdownlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					markdownrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			markdownrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) markdownrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 330 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 330 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 329);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					markdownrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( markdownwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void markdownrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        markdownensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	markdown_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	markdown_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void markdown_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		markdownpop_buffer_state();
	 *		markdownpush_buffer_state(new_buffer);
     */
	markdownensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	markdown_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (markdownwrap()) processing, but the only time this flag
	 * is looked at is after markdownwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void markdown_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE markdown_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) markdownalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_is_our_buffer = 1;

	markdown_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with markdown_create_buffer()
 * @param yyscanner The scanner object.
 */
    void markdown_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		markdownfree((void *) b->yy_ch_buf ,yyscanner );

	markdownfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a markdownrestart() or at EOF.
 */
    static void markdown_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	markdown_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then markdown_init_buffer was _probably_
     * called from markdownrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void markdown_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		markdown_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	markdownensure_buffer_stack(yyscanner);

	/* This block is copied from markdown_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from markdown_switch_to_buffer. */
	markdown_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void markdownpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		markdown_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void markdownensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)markdownalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)markdownrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE markdown_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	markdown_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to markdownlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       markdown_scan_bytes() instead.
 */
YY_BUFFER_STATE markdown_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return markdown_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to markdownlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE markdown_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) markdownalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = markdown_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in markdown_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE markdownget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int markdownget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int markdownget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *markdownget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *markdownget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t markdownget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *markdownget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void markdownset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void markdownset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "markdownset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void markdownset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "markdownset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see markdown_switch_to_buffer
 */
void markdownset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void markdownset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int markdownget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void markdownset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* markdownlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int markdownlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) markdownalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* markdownlex_init_extra has the same functionality as markdownlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to markdownalloc in
 * the yyextra field.
 */

int markdownlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    markdownset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) markdownalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    markdownset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from markdownlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * markdownlex_init()
     */
    return 0;
}

/* markdownlex_destroy is for both reentrant and non-reentrant scanners. */
int markdownlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		markdownpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	markdownfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        markdownfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * markdownlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    markdownfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *markdownalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *markdownrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void markdownfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see markdownrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 56 "markdown.grammar"



int markdownwrap(yyscan_t yyscanner){return 1;}

